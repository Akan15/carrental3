package main

import (
	"log"
	"net"
	"net/http"

	"github.com/Akan15/carrental3/user-service/internal/handlers"
	"github.com/Akan15/carrental3/user-service/internal/metrics"
	natsPkg "github.com/Akan15/carrental3/user-service/internal/nats"
	"github.com/Akan15/carrental3/user-service/internal/repository"
	"github.com/Akan15/carrental3/user-service/internal/usecase"
	emailPkg "github.com/Akan15/carrental3/user-service/internal/usecase/email"

	"github.com/prometheus/client_golang/prometheus/promhttp"

	pb "github.com/Akan15/carrental3/user-service/proto"

	"github.com/joho/godotenv"

	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
	_ = godotenv.Load()

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
	db := repository.InitMongo()
	repo := repository.NewMongoUserRepo(db)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NATS Publisher
	natsPkg.InitPublisher()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è usecase –∏ handler
	uc := usecase.NewUserUseCase(repo, emailPkg.SendEmail)
	handler := handlers.NewUserHandler(uc)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prometheus –º–µ—Ç—Ä–∏–∫
	metrics.Init()

	// –ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫
	go func() {
		http.Handle("/metrics", promhttp.Handler())
		log.Println("üìä –ú–µ—Ç—Ä–∏–∫–∏ Prometheus –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ :2112/metrics")
		log.Fatal(http.ListenAndServe(":2112", nil))
	}()

	// –ó–∞–ø—É—Å–∫ gRPC-—Å–µ—Ä–≤–µ—Ä–∞
	lis, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å gRPC-—Å–µ—Ä–≤–µ—Ä: %v", err)
	}

	grpcServer := grpc.NewServer()
	pb.RegisterUserServiceServer(grpcServer, handler)
	reflection.Register(grpcServer)

	log.Println("‚úÖ UserService –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :50051")
	if err := grpcServer.Serve(lis); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ gRPC-—Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
